{"version":3,"sources":["components/ticket-item/ticket-item.component.jsx","components/ticket-section/ticket-section.component.jsx","components/ticket/ticket.component.jsx","components/canvas/canvas.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TicketItem","imageUrl","name","className","src","alt","TicketSection","color","sectionItems","style","backgroundColor","sort","Math","random","slice","map","id","path","key","Ticket","items","console","log","Canvas","state","data","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6iGAaeA,G,wBAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACf,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACf,yBAAKA,UAAU,cACX,yBAAKC,IAAK,2BAA2B,GAA3B,OAA8BH,GAAYI,IAAI,MAE5D,yBAAKF,UAAU,aAAcD,MCYtBI,EAjBO,SAAC,GAAD,IAAEJ,EAAF,EAAEA,KAAMK,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAf,OAClB,yBAAKL,UAAU,UACXM,MAAO,CAAEC,gBAAgB,QAAD,OAAUH,KAElC,yBAAKJ,UAAU,iBAAiBD,GAEhCM,EAAaG,MAAK,kBAAMC,KAAKC,SAAWD,KAAKC,YAAUC,MAAM,EAAE,GAAGC,KAC9D,YAAuB,IAArBC,EAAoB,EAApBA,GAAId,EAAgB,EAAhBA,KAAMe,EAAU,EAAVA,KACR,OACI,kBAAC,EAAD,CAAYC,IAAKF,EAAIf,SAAUgB,EAAMf,KAAMA,SCIhDiB,EAZA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,yBAAKjB,UAAU,UAAf,SACCkB,QAAQC,IAAIF,GACZA,EAAML,KAAI,YAA+B,IAA7Bb,EAA4B,EAA5BA,KAAMc,EAAsB,EAAtBA,GAAII,EAAkB,EAAlBA,MAAOb,EAAW,EAAXA,MAC1B,OACI,kBAAC,EAAD,CAAeW,IAAKF,EAAId,KAAMA,EAAMK,MAAOA,EAAOC,aAAcY,S,OCiB7DG,E,kDApBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CAACC,QAFJ,E,qDAOV,OACI,yBAAKtB,UAAU,cACnB,kBAAC,EAAD,CAAQiB,MAAOK,IACf,kBAAC,EAAD,CAAQL,MAAOK,S,GAXFC,IAAMC,WCOZC,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCIc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.17abda0f.chunk.js","sourcesContent":["import React from 'react';\nimport './ticket-item.styles.scss';\n\nconst TicketItem = ({ imageUrl, name}) => (\n    <div className=\"item-container\">\n        <div className=\"box\"></div>\n        <div className=\"item-image\">\n            <img src={'housie-ticket-generator/'+`${imageUrl}`} alt=\"\"/>\n        </div>\n        <div className=\"item-name\">{ name }</div>\n    </div>\n);\n\nexport default TicketItem;","import React from 'react';\nimport './ticket-section.styles.scss';\nimport TicketItem from '../ticket-item/ticket-item.component';\n\nconst TicketSection = ({name, color, sectionItems}) => (\n    <div className=\"section\"\n        style={{ backgroundColor: `light${color}`}}\n    >\n        <div className=\"section-title\">{name}</div>\n        { \n        sectionItems.sort(() => Math.random() - Math.random()).slice(0,4).map(\n            ({id, name, path}) => {\n                return (\n                    <TicketItem key={id} imageUrl={path} name={name}/>\n    \n                )\n            }) }\n        </div>\n        )\n      \n\nexport default TicketSection;","import React from 'react';\nimport './ticket.styles.scss';\n\nimport TicketSection from '../ticket-section/ticket-section.component'\n\nconst Ticket = ({ items }) => (\n    <div className=\"layout\">Ticket\n    {console.log(items)}\n    {items.map(({name, id, items, color}) => {\n        return (\n            <TicketSection key={id} name={name} color={color} sectionItems={items}/>\n        )\n    })}\n    </div>\n    \n);\n\nexport default Ticket;","import React from 'react';\nimport './canvas.styles.scss';\nimport Ticket from '../ticket/ticket.component';\n\nimport data from '../../image-data/image-data.json';\n\nclass Canvas extends React.Component {\n    constructor() {\n        super();\n        this.state = {data};\n    }\n    \n\n    render() {\n        return (\n            <div className=\"background\">\n        <Ticket items={data}/>\n        <Ticket items={data}/>\n        {/* <Ticket items={data}/>\n        <Ticket items={data}/> */}\n\n    </div>\n        )\n    }\n}\n\n\nexport default Canvas;","import React from 'react';\nimport './App.css';\n\nimport Canvas from './components/canvas/canvas.component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}