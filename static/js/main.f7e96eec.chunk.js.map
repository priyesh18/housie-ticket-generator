{"version":3,"sources":["components/ticket-item/ticket-item.component.jsx","components/callout/callout.component.jsx","components/ticket-section/ticket-section.component.jsx","components/ticket/ticket.component.jsx","components/canvas/canvas.component.jsx","pages/main-page/main-page.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TicketItem","imageUrl","name","className","src","alt","toLowerCase","Callout","onCalloutClick","prevPool","state","pool","length","selectedIndex","Math","floor","random","selectedItem","splice","setState","data","sort","item1","item2","id","localeCompare","selected","map","section","items","flat","path","this","onClick","key","React","Component","TicketSection","color","sectionItems","style","backgroundColor","slice","Ticket","folder","Canvas","onCountChange","e","count","target","value","elem","i","push","type","placeholder","onChange","step","window","print","createTickets","MainPage","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7e96eec.chunk.js","sourcesContent":["import React from 'react';\nimport './ticket-item.styles.scss';\n\nconst TicketItem = ({ imageUrl, name}) => (\n    <div className=\"item-container\">\n        <div className=\"item-image\">\n            <div className=\"box\"></div>\n                <img src={`/housie-ticket-generator/${imageUrl}`} alt=\"\"/>\n    \n        </div>\n        <div className=\"item-name\">{ name.toLowerCase() }</div>\n    </div>\n);\n\nexport default TicketItem;","import React from 'react';\nimport './callout.styles.scss';\nimport data from '../../image-data/image-data.json';\n\nimport TicketItem from '../ticket-item/ticket-item.component';\n\n\nclass Callout extends React.Component {\n    constructor() {\n        \n        super();\n        this.state = {\n            data: [], \n            pool: data.map((section) => (section.items)).flat(), \n            selected: {name: '', path: ''}\n        };\n    }\n    onCalloutClick = () => {\n        let prevPool = this.state.pool;\n        if(prevPool.length === 0) return;\n        let selectedIndex = Math.floor(Math.random()*prevPool.length); // use pool from state in future\n        let selectedItem = prevPool[selectedIndex];\n        prevPool.splice(selectedIndex, 1);\n        this.setState({\n            data: [...this.state.data, selectedItem]\n            .sort(\n                (item1, item2)=> (item1.id.localeCompare(item2.id))\n                ),\n            pool: prevPool, \n            selected: selectedItem\n        });\n            \n    }\n\n    render () {\n        return (\n            <div className=\"callout\">\n            <div>\n            <TicketItem imageUrl={this.state.selected.path} name={this.state.selected.name}/>\n\n            </div>\n            <button onClick={this.onCalloutClick}>Callout Next</button>\n        <h2>Board (Remaining: {this.state.pool.length})</h2>\n            <p>(Items sorted by category and alphabetically)</p>\n            <div className=\"board\">\n                {\n                    this.state.data.map(\n                        ({id, name, path}) => {\n                            return (\n                                <TicketItem key={name+id} imageUrl={path} name={name}/>\n                \n                            )\n                        })\n                }\n\n            </div>\n            \n        </div>\n    \n            )\n        }\n    }\n\n\nexport default Callout;","import React from 'react';\nimport './ticket-section.styles.scss';\nimport TicketItem from '../ticket-item/ticket-item.component';\n\nconst TicketSection = ({name, color, sectionItems}) => (\n    <div className=\"section\"\n        style={{ backgroundColor: `light${color}`}}\n    >\n        <div className=\"section-title\">{name}</div>\n        { \n        sectionItems.sort(() => Math.random() - Math.random()).slice(0,4).map(\n            ({id, name, path}) => {\n                return (\n                    <TicketItem key={id} imageUrl={path} name={name}/>\n    \n                )\n            }) }\n        </div>\n        )\n      \n\nexport default TicketSection;","import React from 'react';\nimport './ticket.styles.scss';\n\nimport TicketSection from '../ticket-section/ticket-section.component'\n\nconst Ticket = ({ items }) => (\n    <div className=\"layout\">\n        Ticket\n    {items\n        .sort((item1,item2) => (item1.folder.localeCompare(item2.folder)))\n        .map(({name, id, items, color}) => {\n            return (\n                <TicketSection key={id} name={name} color={color} sectionItems={items}/>\n            )\n    })}\n    </div>\n    \n);\n\nexport default Ticket;","import React from 'react';\nimport './canvas.styles.scss';\nimport Ticket from '../ticket/ticket.component';\n\nimport data from '../../image-data/image-data.json';\n\nclass Canvas extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: data, \n            count: 2\n           }\n    }\n    onCountChange = (e) => (\n        this.setState({count: e.target.value})\n\n    )\n    createTickets() {\n        let elem = [];\n        for (let i = 0; i < this.state.count; i++) {\n            elem.push(<Ticket key={i} items={this.state.data}/>)          \n        }\n        return elem;\n    }\n    \n\n    render() {\n        return (\n            <div>\n                <h3>Generate Tickets</h3>\n                <div className=\"input-box\">\n                    Enter number of tickets: \n                    <input type=\"number\" placeholder=\"2\" onChange={this.onCountChange} step=\"2\"/>\n                    <button onClick={() => (window.print())}>Print</button>\n\n                </div>\n            <div className=\"canvas\">\n                {\n                    this.createTickets()\n                }\n       \n            </div>\n       \n\n    </div>\n        )\n    }\n}\n\n\nexport default Canvas;","import React from 'react';\nimport './main-page.styles.scss';\n\nimport Callout from '../../components/callout/callout.component';\nimport Canvas from '../../components/canvas/canvas.component';\n\nconst MainPage = () => (\n\n            <div className=\"container\">\n                <Callout />\n                <Canvas />\n            </div>\n)\n\n\n\nexport default MainPage;","import React from 'react';\nimport './App.css';\n\n// import Canvas from './components/canvas/canvas.component';\nimport MainPage from './pages/main-page/main-page.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Canvas/> */ <MainPage/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}